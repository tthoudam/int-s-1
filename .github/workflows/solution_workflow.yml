name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - '"main"'

env:
  PROJECT_ID: 'boreal-mode-295611'
  GKE_CLUSTER: 'boreal-mode-295611-gke-int-s-1'
  GKE_ZONE: 'europe-west1-b'
  DEPLOYMENT_NAME: 'gke-test'

jobs:
  deploy-all:
    name: 'Setup, terraform, Helm, Istio, Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'test'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        name: Authenticate to Google Cloud using Workload Identity Federation
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          project_id: ${{ secrets.PROJECT_ID }}
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: ${{ secrets.TF_SERVICE_ACC }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform apply
        run: |
            terraform apply -auto-approve -input=false

      - name: Extract GKE outputs
        id: tf_outputs
        run: |
          echo "kubernetes_cluster_name=$(terraform output -raw kubernetes_cluster_name)" >> $GITHUB_OUTPUT
          echo "location=$(terraform output -raw location)" >> $GITHUB_OUTPUT
          echo "project_id=$(terraform output -raw project_id)" >> $GITHUB_OUTPUT
          echo "kubernetes_sa=$(terraform output -raw kubernetes_service_account)" >> $GITHUB_OUTPUT

      # Get the GKE credentials using terraform output so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ steps.tf_outputs.outputs.kubernetes_cluster_name }}
          location: ${{ steps.tf_outputs.outputs.location }}
          project_id: ${{ steps.tf_outputs.outputs.project_id }}
          service_account: ${{ steps.tf_outputs.outputs.kubernetes_sa }}

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml

      - name: Install Jetstack CAS CRD
        run: |
          kubectl apply -f https://raw.githubusercontent.com/jetstack/google-cas-issuer/master/deploy/crds/googlecasclusterissuer_crd.yaml

      - name: Install Jetstack CAS controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/jetstack/google-cas-issuer/master/deploy/google-cas-issuer.yaml

      - name: Helm install istio
        run: |
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo update
          helm install istio-base istio/base -n istio-system --create-namespace
          helm install istiod istio/istiod -n istio-system \
            --set global.meshID=mesh1 \
            --set global.multiCluster.clusterName=${{ steps.tf_outputs.outputs.kubernetes_cluster_name }} \
            --set global.network=network1 \
            --set meshConfig.accessLogFile=/dev/stdout \

      - name: Helm install istio ingressgateway
        run: |
            helm upgrade --install istio-ingressgateway istio/gateway \
            -n istio-system \
            --create-namespace \
            --set service.type=LoadBalancer

      - name: Install yq
        run: |
            sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq

      - name: Patch CAS Issuer from Terraform outputs
        run: |
          yq e '.spec.caPoolId = "${{ steps.tf_outputs.outputs.ca_pool_id }}"' -i istio/cas_issuer.yaml
          yq e '.spec.project = "${{ steps.tf_outputs.outputs.project_id }}"' -i istio/cas_issuer.yaml
          yq e '.spec.location = "${{ steps.tf_outputs.outputs.location }}"' -i istio/cas_issuer.yaml 

      - name: Apply CAS/Ingress Manifests
        run: |
            kubectl apply -f istio/cas-issuer.yaml
            kubectl apply -f istio/certificate.yaml
            kubectl apply -f istio/gateway.yaml
            kubectl apply -f istio/virtual-service.yaml


